{
    "openapi": "3.0.0",
    "info": {
        "title": "Application API",
        "version": "3.0.0",
        "description": "API of 3000 website documentation"
    },
    "paths": {
        "/api/login": {
            "post": {
                "tags": ["Auth"],
                "summary": "User login",
                "operationId": "login",
                "requestBody": {
                    "description": "User login credentials",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": ["login", "password"],
                                "properties": {
                                    "email": {
                                        "type": "string",
                                        "format": "login",
                                        "example": "admin@gmail.com"
                                    },
                                    "password": {
                                        "type": "string",
                                        "format": "password",
                                        "example": "123456"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Login successful"
                    },
                    "500": {
                        "description": "Unauthenticated"
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "The given data was invalid."
                                        },
                                        "errors": {
                                            "properties": {
                                                "email": {
                                                    "type": "array",
                                                    "items": {
                                                        "type": "string",
                                                        "example": "The email field is required."
                                                    }
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/register": {
            "post": {
                "tags": ["Auth"],
                "summary": "User register",
                "operationId": "register",
                "requestBody": {
                    "description": "User register credentials",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "name",
                                    "email/phone",
                                    "password",
                                    "confirmPassword"
                                ],
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "example": "John Doe"
                                    },
                                    "email": {
                                        "type": "string",
                                        "format": "email/phone",
                                        "example": "admin@gmail.com"
                                    },
                                    "password": {
                                        "type": "string",
                                        "format": "password",
                                        "example": "123456"
                                    },
                                    "confirmPassword": {
                                        "type": "string",
                                        "format": "password",
                                        "example": "123456"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Register successful"
                    },
                    "500": {
                        "description": "Unauthenticated"
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "The given data was invalid."
                                        },
                                        "errors": {
                                            "properties": {
                                                "email": {
                                                    "type": "array",
                                                    "items": {
                                                        "type": "string",
                                                        "example": "The email field is required."
                                                    }
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/changePassword": {
            "post": {
                "tags": ["Auth"],
                "summary": "User change password",
                "operationId": "changePassword",
                "requestBody": {
                    "description": "Change password credentials",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "currentPassword",
                                    "newPassword",
                                    "confirmPassword"
                                ],
                                "properties": {
                                    "currentPassword": {
                                        "type": "string",
                                        "format": "password",
                                        "example": "123456"
                                    },
                                    "newPassword": {
                                        "type": "string",
                                        "format": "password",
                                        "example": "12345678"
                                    },
                                    "confirmPassword": {
                                        "type": "string",
                                        "format": "password",
                                        "example": "12345678"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Change password successful"
                    },
                    "500": {
                        "description": "Unauthenticated"
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "The given data was invalid."
                                        },
                                        "errors": {
                                            "properties": {
                                                "email": {
                                                    "type": "array",
                                                    "items": {
                                                        "type": "string",
                                                        "example": "The email field is required."
                                                    }
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/users": {
            "get": {
                "tags": ["Users"],
                "summary": "Get all users",
                "operationId": "getUsers",
                "responses": {
                    "200": {
                        "description": "Successful response"
                    },
                    "422": {
                        "description": "Wrong credentials response"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "post": {
                "tags": ["Users"],
                "summary": "Create a new user",
                "operationId": "createUsers",
                "requestBody": {
                    "description": "Create a new user",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "name",
                                    "email",
                                    "password",
                                    "role"
                                ],
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "example": "John Doe"
                                    },
                                    "email": {
                                        "type": "string",
                                        "format": "email",
                                        "example": "user1@mail.com"
                                    },
                                    "password": {
                                        "type": "string",
                                        "format": "password",
                                        "example": "PassWord12345"
                                    },
                                    "role": {
                                        "type": "string",
                                        "example": "ADMIN"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "User created successfully"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "422": {
                        "description": "Wrong input or user already exists"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/users/{id}": {
            "get": {
                "tags": ["Users"],
                "summary": "Get a user by ID",
                "operationId": "getUser",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the user to retrieve",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "404": {
                        "description": "User not found"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "put": {
                "tags": ["Users"],
                "summary": "Update user",
                "operationId": "updateUsers",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the user to update",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Update a user by ID",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "name",
                                    "email",
                                    "password",
                                    "role"
                                ],
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "example": "John Doe"
                                    },
                                    "email": {
                                        "type": "string",
                                        "format": "email",
                                        "example": "user1@mail.com"
                                    },
                                    "password": {
                                        "type": "string",
                                        "format": "password",
                                        "example": "PassWord12345"
                                    },
                                    "role": {
                                        "type": "string",
                                        "example": "USER"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "User updated successfully"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "422": {
                        "description": "Wrong input or user already exists"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "delete": {
                "tags": ["Users"],
                "summary": "Delete a user by ID",
                "operationId": "deleteUser",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the user to delete",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "User deleted successfully"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "404": {
                        "description": "User not found"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/categories": {
            "get": {
                "tags": ["Categories"],
                "summary": "Get all category",
                "operationId": "getCategories",
                "responses": {
                    "200": {
                        "description": "Successfully response"
                    },
                    "422": {
                        "description": "Wrong credentials response"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "post": {
                "tags": ["Categories"],
                "summary": "Create a new category",
                "operationId": "createCategory",
                "requestBody": {
                    "description": "Create a new category",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": ["name", "parent_id", "icon_url"],
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "example": "Laptop"
                                    },
                                    "parent_id": {
                                        "type": "number",
                                        "example": 1
                                    },
                                    "icon_url": {
                                        "type": "string",
                                        "example": "public/img.png"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Category created successfully"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "422": {
                        "description": "Wrong input or user already exists"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/categories/{id}": {
            "get": {
                "tags": ["Categories"],
                "summary": "Get a category by ID",
                "operationId": "getCategory",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the category to retrieve",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "404": {
                        "description": "User not found"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "put": {
                "tags": ["Categories"],
                "summary": "Update category",
                "operationId": "updateCategory",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the category to update",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Update a category by ID",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": ["name", "parent_id", "icon_url"],
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "example": "Laptop"
                                    },
                                    "parent_id": {
                                        "type": "integer",
                                        "example": 1
                                    },
                                    "icon_url": {
                                        "type": "string",
                                        "example": "public/img.png"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Category updated successfully"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "422": {
                        "description": "Wrong input or category already exists"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "delete": {
                "tags": ["Categories"],
                "summary": "Delete a category by ID",
                "operationId": "deleteCategory",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the Category to delete",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Category deleted successfully"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "404": {
                        "description": "Category not found"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/brands": {
            "get": {
                "tags": ["Brands"],
                "summary": "Get all Brands",
                "operationId": "getBrands",
                "responses": {
                    "200": {
                        "description": "Successfully response"
                    },
                    "422": {
                        "description": "Wrong credentials response"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "post": {
                "tags": ["Brands"],
                "summary": "Create a new brand",
                "operationId": "createBrand",
                "requestBody": {
                    "description": "Create a new brand",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": ["name", "parent_id", "icon_url"],
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "example": "Laptop"
                                    },
                                    "parent_id": {
                                        "type": "number",
                                        "example": 1
                                    },
                                    "icon_url": {
                                        "type": "string",
                                        "example": "public/img.png"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Brand created successfully"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "422": {
                        "description": "Wrong input or user already exists"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/brands/{id}": {
            "get": {
                "tags": ["Brands"],
                "summary": "Get a brands by ID",
                "operationId": "getBrand",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the brand to retrieve",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "404": {
                        "description": "User not found"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "put": {
                "tags": ["Brands"],
                "summary": "Update brand",
                "operationId": "updateBrand",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the brand to update",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Update a brand by ID",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": ["name", "parent_id", "icon_url"],
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "example": "Laptop"
                                    },
                                    "parent_id": {
                                        "type": "integer",
                                        "example": 1
                                    },
                                    "icon_url": {
                                        "type": "string",
                                        "example": "public/img.png"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Brand updated successfully"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "422": {
                        "description": "Wrong input or Brand already exists"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "delete": {
                "tags": ["Brands"],
                "summary": "Delete a brand by ID",
                "operationId": "deleteBrand",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the brand to delete",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Brand deleted successfully"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "404": {
                        "description": "Brand not found"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/variant_types": {
            "get": {
                "tags": ["VariantType"],
                "summary": "Get all Variant types",
                "operationId": "getVariantTypes",
                "responses": {
                    "200": {
                        "description": "Successfully response"
                    },
                    "422": {
                        "description": "Wrong credentials response"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "post": {
                "tags": ["VariantType"],
                "summary": "Create a new VariantType",
                "operationId": "createVariantType",
                "requestBody": {
                    "description": "Create a new VariantType",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": ["name", "parent_id", "icon_url"],
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "example": "Sức khoẻ"
                                    },
                                    "parent_id": {
                                        "type": "number",
                                        "example": 1
                                    },
                                    "icon_url": {
                                        "type": "string",
                                        "example": "public/img.png"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "VariantType created successfully"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "422": {
                        "description": "Wrong input or user already exists"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/variant_types/{id}": {
            "get": {
                "tags": ["VariantType"],
                "summary": "Get a VariantType by ID",
                "operationId": "getVariantType",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the brand to retrieve",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "404": {
                        "description": "User not found"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "put": {
                "tags": ["VariantType"],
                "summary": "Update VariantType",
                "operationId": "updateVariantType",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the VariantType to update",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Update a VariantType by ID",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": ["name", "parent_id", "icon_url"],
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "example": "Sức khoẻ"
                                    },
                                    "parent_id": {
                                        "type": "integer",
                                        "example": 1
                                    },
                                    "icon_url": {
                                        "type": "string",
                                        "example": "public/img.png"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "VariantType updated successfully"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "422": {
                        "description": "Wrong input or VariantType already exists"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "delete": {
                "tags": ["VariantType"],
                "summary": "Delete a VariantType by ID",
                "operationId": "deleteBrand",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the VariantType to delete",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "VariantType deleted successfully"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "404": {
                        "description": "VariantType not found"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/products": {
            "get": {
                "tags": ["Products"],
                "summary": "Get all Products",
                "operationId": "getProducts",
                "responses": {
                    "200": {
                        "description": "Successfully response"
                    },
                    "422": {
                        "description": "Wrong credentials response"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "post": {
                "tags": ["Products"],
                "summary": "Create a new Product",
                "operationId": "createProduct",
                "requestBody": {
                    "description": "Create a new Product",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "name",
                                    "price",
                                    "discount",
                                    "short_desc",
                                    "detail",
                                    "thumbnail",
                                    "category_id",
                                    "status",
                                    "quantity"
                                ],
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "example": "Iphone 14"
                                    },
                                    "price": {
                                        "type": "integer",
                                        "example": 30000000
                                    },
                                    "discount": {
                                        "type": "integer",
                                        "example": 0
                                    },
                                    "short_desc": {
                                        "type": "string",
                                        "example": "This is the short description of product"
                                    },
                                    "detail": {
                                        "type": "string",
                                        "example": "This is the detail of product"
                                    },
                                    "thumbnail": {
                                        "type": "string",
                                        "example": "public/img.png"
                                    },
                                    "status": {
                                        "type": "string",
                                        "example": "in_stock"
                                    },
                                    "quantity": {
                                        "type": "integer",
                                        "example": 1000
                                    },
                                    "category_id": {
                                        "type": "integer",
                                        "example": 1
                                    },
                                    "brand_ids": {
                                        "type": "array",
                                        "example": [1, 2, 3]
                                    },
                                    "images": {
                                        "type": "array",
                                        "example": [
                                            "public/img.jpg",
                                            "public/img2.jpg",
                                            "public/img3.jpg"
                                        ]
                                    },
                                    "tags": {
                                        "type": "string",
                                        "example": "hot|sale|deal"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Brand created successfully"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "422": {
                        "description": "Wrong input or user already exists"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/products/{id}": {
            "get": {
                "tags": ["Products"],
                "summary": "Get a Product by ID",
                "operationId": "getProduct",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the brand to retrieve",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "404": {
                        "description": "User not found"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "put": {
                "tags": ["Products"],
                "summary": "Update Product",
                "operationId": "updateProduct",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the Product to update",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Update a brand by ID",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "name",
                                    "price",
                                    "discount",
                                    "short_desc",
                                    "detail",
                                    "thumbnail",
                                    "category_id",
                                    "status",
                                    "quantity"
                                ],
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "example": "Iphone 14"
                                    },
                                    "price": {
                                        "type": "integer",
                                        "example": 30000000
                                    },
                                    "discount": {
                                        "type": "integer",
                                        "example": 0
                                    },
                                    "short_desc": {
                                        "type": "string",
                                        "example": "This is the short description of product"
                                    },
                                    "detail": {
                                        "type": "string",
                                        "example": "This is the detail of product"
                                    },
                                    "thumbnail": {
                                        "type": "string",
                                        "example": "public/img.png"
                                    },
                                    "status": {
                                        "type": "string",
                                        "example": "in_stock"
                                    },
                                    "quantity": {
                                        "type": "integer",
                                        "example": 100
                                    },
                                    "category_id": {
                                        "type": "integer",
                                        "example": 1
                                    },
                                    "brand_ids": {
                                        "type": "array",
                                        "example": [1, 2, 3]
                                    },
                                    "images": {
                                        "type": "array",
                                        "example": [
                                            "public/img.jpg",
                                            "public/img2.jpg",
                                            "public/img3.jpg"
                                        ]
                                    },
                                    "tags": {
                                        "type": "string",
                                        "example": "hot|sale|deal"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Product updated successfully"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "422": {
                        "description": "Wrong input or Product already exists"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "delete": {
                "tags": ["Products"],
                "summary": "Delete a Product by ID",
                "operationId": "deleteProduct",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the Product to delete",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Product deleted successfully"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "404": {
                        "description": "Product not found"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        }
    },

    "components": {
        "securitySchemes": {
            "sanctum": {
                "type": "apiKey",
                "description": "Enter token in format (Bearer <token>)",
                "name": "Authorization",
                "in": "header",
                "default": "Bearer <token>"
            }
        }
    }
}
