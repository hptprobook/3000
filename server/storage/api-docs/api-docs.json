{
    "openapi": "3.0.0",
    "info": {
        "title": "Application API",
        "version": "3.0.0",
        "description": "API of 3000 website documentation"
    },
    "paths": {
        "/api/login": {
            "post": {
                "tags": ["Auth"],
                "summary": "User login",
                "operationId": "login",
                "requestBody": {
                    "description": "User login credentials",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": ["login", "password"],
                                "properties": {
                                    "email": {
                                        "type": "string",
                                        "format": "login",
                                        "example": "admin@gmail.com"
                                    },
                                    "password": {
                                        "type": "string",
                                        "format": "password",
                                        "example": "123456"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Login successful"
                    },
                    "500": {
                        "description": "Unauthenticated"
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "The given data was invalid."
                                        },
                                        "errors": {
                                            "properties": {
                                                "email": {
                                                    "type": "array",
                                                    "items": {
                                                        "type": "string",
                                                        "example": "The email field is required."
                                                    }
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/register": {
            "post": {
                "tags": ["Auth"],
                "summary": "User register",
                "operationId": "register",
                "requestBody": {
                    "description": "User register credentials",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "name",
                                    "email/phone",
                                    "password",
                                    "confirmPassword"
                                ],
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "example": "John Doe"
                                    },
                                    "email": {
                                        "type": "string",
                                        "format": "email/phone",
                                        "example": "admin@gmail.com"
                                    },
                                    "password": {
                                        "type": "string",
                                        "format": "password",
                                        "example": "123456"
                                    },
                                    "confirmPassword": {
                                        "type": "string",
                                        "format": "password",
                                        "example": "123456"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Register successful"
                    },
                    "500": {
                        "description": "Unauthenticated"
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "The given data was invalid."
                                        },
                                        "errors": {
                                            "properties": {
                                                "email": {
                                                    "type": "array",
                                                    "items": {
                                                        "type": "string",
                                                        "example": "The email field is required."
                                                    }
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/changePassword": {
            "post": {
                "tags": ["Auth"],
                "summary": "User change password",
                "operationId": "changePassword",
                "requestBody": {
                    "description": "Change password credentials",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "currentPassword",
                                    "newPassword",
                                    "confirmPassword"
                                ],
                                "properties": {
                                    "currentPassword": {
                                        "type": "string",
                                        "format": "password",
                                        "example": "123456"
                                    },
                                    "newPassword": {
                                        "type": "string",
                                        "format": "password",
                                        "example": "12345678"
                                    },
                                    "confirmPassword": {
                                        "type": "string",
                                        "format": "password",
                                        "example": "12345678"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Change password successful"
                    },
                    "500": {
                        "description": "Unauthenticated"
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "The given data was invalid."
                                        },
                                        "errors": {
                                            "properties": {
                                                "email": {
                                                    "type": "array",
                                                    "items": {
                                                        "type": "string",
                                                        "example": "The email field is required."
                                                    }
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/users": {
            "get": {
                "tags": ["Users"],
                "summary": "Get all users",
                "operationId": "getUsers",
                "responses": {
                    "200": {
                        "description": "Successful response"
                    },
                    "422": {
                        "description": "Wrong credentials response"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "post": {
                "tags": ["Users"],
                "summary": "Create a new user",
                "operationId": "createUsers",
                "requestBody": {
                    "description": "Create a new user",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "name",
                                    "email",
                                    "password",
                                    "role"
                                ],
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "example": "John Doe"
                                    },
                                    "email": {
                                        "type": "string",
                                        "format": "email",
                                        "example": "user1@mail.com"
                                    },
                                    "password": {
                                        "type": "string",
                                        "format": "password",
                                        "example": "PassWord12345"
                                    },
                                    "role": {
                                        "type": "string",
                                        "example": "ADMIN"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "User created successfully"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "422": {
                        "description": "Wrong input or user already exists"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/users/{id}": {
            "get": {
                "tags": ["Users"],
                "summary": "Get a user by ID",
                "operationId": "getUser",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the user to retrieve",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "404": {
                        "description": "User not found"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "put": {
                "tags": ["Users"],
                "summary": "Update user",
                "operationId": "updateUsers",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the user to update",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Update a user by ID",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "name",
                                    "email",
                                    "password",
                                    "role"
                                ],
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "example": "John Doe"
                                    },
                                    "email": {
                                        "type": "string",
                                        "format": "email",
                                        "example": "user1@mail.com"
                                    },
                                    "password": {
                                        "type": "string",
                                        "format": "password",
                                        "example": "PassWord12345"
                                    },
                                    "role": {
                                        "type": "string",
                                        "example": "USER"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "User updated successfully"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "422": {
                        "description": "Wrong input or user already exists"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "delete": {
                "tags": ["Users"],
                "summary": "Delete a user by ID",
                "operationId": "deleteUser",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the user to delete",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "User deleted successfully"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "404": {
                        "description": "User not found"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/categories": {
            "get": {
                "tags": ["Categories"],
                "summary": "Get all category",
                "operationId": "getCategories",
                "responses": {
                    "200": {
                        "description": "Successfully response"
                    },
                    "422": {
                        "description": "Wrong credentials response"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "post": {
                "tags": ["Categories"],
                "summary": "Create a new category",
                "operationId": "createCategory",
                "requestBody": {
                    "description": "Create a new category",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": ["name", "parent_id", "icon_url"],
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "example": "Laptop"
                                    },
                                    "parent_id": {
                                        "type": "number",
                                        "example": 1
                                    },
                                    "icon_url": {
                                        "type": "string",
                                        "example": "public/img.png"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Category created successfully"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "422": {
                        "description": "Wrong input or user already exists"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/categories/{id}": {
            "get": {
                "tags": ["Categories"],
                "summary": "Get a category by ID",
                "operationId": "getCategory",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the category to retrieve",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "404": {
                        "description": "User not found"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "put": {
                "tags": ["Categories"],
                "summary": "Update category",
                "operationId": "updateCategory",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the category to update",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Update a category by ID",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": ["name", "parent_id", "icon_url"],
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "example": "Laptop"
                                    },
                                    "parent_id": {
                                        "type": "integer",
                                        "example": 1
                                    },
                                    "icon_url": {
                                        "type": "string",
                                        "example": "public/img.png"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Category updated successfully"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "422": {
                        "description": "Wrong input or category already exists"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "delete": {
                "tags": ["Categories"],
                "summary": "Delete a category by ID",
                "operationId": "deleteCategory",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the Category to delete",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Category deleted successfully"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "404": {
                        "description": "Category not found"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/brands": {
            "get": {
                "tags": ["Brands"],
                "summary": "Get all Brands",
                "operationId": "getBrands",
                "responses": {
                    "200": {
                        "description": "Successfully response"
                    },
                    "422": {
                        "description": "Wrong credentials response"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "post": {
                "tags": ["Brands"],
                "summary": "Create a new brand",
                "operationId": "createBrand",
                "requestBody": {
                    "description": "Create a new brand",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": ["name", "parent_id", "icon_url"],
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "example": "Laptop"
                                    },
                                    "parent_id": {
                                        "type": "number",
                                        "example": 1
                                    },
                                    "icon_url": {
                                        "type": "string",
                                        "example": "public/img.png"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Brand created successfully"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "422": {
                        "description": "Wrong input or user already exists"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/brands/{id}": {
            "get": {
                "tags": ["Brands"],
                "summary": "Get a brands by ID",
                "operationId": "getBrand",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the brand to retrieve",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "404": {
                        "description": "User not found"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "put": {
                "tags": ["Brands"],
                "summary": "Update brand",
                "operationId": "updateBrand",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the brand to update",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Update a brand by ID",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": ["name", "parent_id", "icon_url"],
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "example": "Laptop"
                                    },
                                    "parent_id": {
                                        "type": "integer",
                                        "example": 1
                                    },
                                    "icon_url": {
                                        "type": "string",
                                        "example": "public/img.png"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Brand updated successfully"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "422": {
                        "description": "Wrong input or Brand already exists"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "delete": {
                "tags": ["Brands"],
                "summary": "Delete a brand by ID",
                "operationId": "deleteBrand",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the brand to delete",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Brand deleted successfully"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "404": {
                        "description": "Brand not found"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/variant_types": {
            "get": {
                "tags": ["VariantType"],
                "summary": "Get all Variant types",
                "operationId": "getVariantTypes",
                "responses": {
                    "200": {
                        "description": "Successfully response"
                    },
                    "422": {
                        "description": "Wrong credentials response"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "post": {
                "tags": ["VariantType"],
                "summary": "Create a new VariantType",
                "operationId": "createVariantType",
                "requestBody": {
                    "description": "Create a new VariantType",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": ["name", "parent_id", "icon_url"],
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "example": "Sức khoẻ"
                                    },
                                    "parent_id": {
                                        "type": "number",
                                        "example": 1
                                    },
                                    "icon_url": {
                                        "type": "string",
                                        "example": "public/img.png"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "VariantType created successfully"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "422": {
                        "description": "Wrong input or user already exists"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/variant_types/{id}": {
            "get": {
                "tags": ["VariantType"],
                "summary": "Get a VariantType by ID",
                "operationId": "getVariantType",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the brand to retrieve",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "404": {
                        "description": "User not found"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "put": {
                "tags": ["VariantType"],
                "summary": "Update VariantType",
                "operationId": "updateVariantType",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the VariantType to update",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Update a VariantType by ID",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": ["name", "parent_id", "icon_url"],
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "example": "Sức khoẻ"
                                    },
                                    "parent_id": {
                                        "type": "integer",
                                        "example": 1
                                    },
                                    "icon_url": {
                                        "type": "string",
                                        "example": "public/img.png"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "VariantType updated successfully"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "422": {
                        "description": "Wrong input or VariantType already exists"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "delete": {
                "tags": ["VariantType"],
                "summary": "Delete a VariantType by ID",
                "operationId": "deleteBrand",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the VariantType to delete",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "VariantType deleted successfully"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "404": {
                        "description": "VariantType not found"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/products": {
            "get": {
                "tags": ["Products"],
                "summary": "Get all Products",
                "operationId": "getProducts",
                "responses": {
                    "200": {
                        "description": "Successfully response"
                    },
                    "422": {
                        "description": "Wrong credentials response"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "post": {
                "tags": ["Products"],
                "summary": "Create a new Product",
                "operationId": "createProduct",
                "requestBody": {
                    "description": "Create a new Product",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "name",
                                    "price",
                                    "discount",
                                    "short_desc",
                                    "detail",
                                    "thumbnail",
                                    "category_id",
                                    "status",
                                    "quantity"
                                ],
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "example": "Iphone 14"
                                    },
                                    "price": {
                                        "type": "integer",
                                        "example": 30000000
                                    },
                                    "discount": {
                                        "type": "integer",
                                        "example": 0
                                    },
                                    "short_desc": {
                                        "type": "string",
                                        "example": "This is the short description of product"
                                    },
                                    "detail": {
                                        "type": "string",
                                        "example": "This is the detail of product"
                                    },
                                    "thumbnail": {
                                        "type": "string",
                                        "example": "public/img.png"
                                    },
                                    "status": {
                                        "type": "string",
                                        "example": "in_stock"
                                    },
                                    "quantity": {
                                        "type": "integer",
                                        "example": 1000
                                    },
                                    "category_id": {
                                        "type": "integer",
                                        "example": 1
                                    },
                                    "brand_ids": {
                                        "type": "array",
                                        "example": [1, 2, 3]
                                    },
                                    "images": {
                                        "type": "array",
                                        "example": [
                                            "public/img.jpg",
                                            "public/img2.jpg",
                                            "public/img3.jpg"
                                        ]
                                    },
                                    "tags": {
                                        "type": "string",
                                        "example": "hot|sale|deal"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Brand created successfully"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "422": {
                        "description": "Wrong input or user already exists"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/products/{id}": {
            "get": {
                "tags": ["Products"],
                "summary": "Get a Product by ID",
                "operationId": "getProduct",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the brand to retrieve",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "404": {
                        "description": "User not found"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "put": {
                "tags": ["Products"],
                "summary": "Update Product",
                "operationId": "updateProduct",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the Product to update",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Update a brand by ID",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "name",
                                    "price",
                                    "discount",
                                    "short_desc",
                                    "detail",
                                    "thumbnail",
                                    "category_id",
                                    "status",
                                    "quantity"
                                ],
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "example": "Iphone 14"
                                    },
                                    "price": {
                                        "type": "integer",
                                        "example": 30000000
                                    },
                                    "discount": {
                                        "type": "integer",
                                        "example": 0
                                    },
                                    "short_desc": {
                                        "type": "string",
                                        "example": "This is the short description of product"
                                    },
                                    "detail": {
                                        "type": "string",
                                        "example": "This is the detail of product"
                                    },
                                    "thumbnail": {
                                        "type": "string",
                                        "example": "public/img.png"
                                    },
                                    "status": {
                                        "type": "string",
                                        "example": "in_stock"
                                    },
                                    "quantity": {
                                        "type": "integer",
                                        "example": 100
                                    },
                                    "category_id": {
                                        "type": "integer",
                                        "example": 1
                                    },
                                    "brand_ids": {
                                        "type": "array",
                                        "example": [1, 2, 3]
                                    },
                                    "images": {
                                        "type": "array",
                                        "example": [
                                            "public/img.jpg",
                                            "public/img2.jpg",
                                            "public/img3.jpg"
                                        ]
                                    },
                                    "tags": {
                                        "type": "string",
                                        "example": "hot|sale|deal"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Product updated successfully"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "422": {
                        "description": "Wrong input or Product already exists"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "delete": {
                "tags": ["Products"],
                "summary": "Delete a Product by ID",
                "operationId": "deleteProduct",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the Product to delete",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Product deleted successfully"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "404": {
                        "description": "Product not found"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/posts": {
            "get": {
                "tags": ["Posts"],
                "summary": "Get all Posts",
                "operationId": "getPosts",
                "responses": {
                    "200": {
                        "description": "Successfully response"
                    },
                    "422": {
                        "description": "Wrong credentials response"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "post": {
                "tags": ["Posts"],
                "summary": "Create a new Post",
                "operationId": "createPost",
                "requestBody": {
                    "description": "Create a new Post",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "title",
                                    "content",
                                    "author",
                                    "tags",
                                    "img",
                                    "status"
                                ],
                                "properties": {
                                    "title": {
                                        "type": "string",
                                        "example": "Title of the post"
                                    },
                                    "content": {
                                        "type": "string",
                                        "example": "Content of the post"
                                    },
                                    "author": {
                                        "type": "string",
                                        "example": "Author's name"
                                    },
                                    "tags": {
                                        "type": "string",
                                        "example": "tag1|tag2|tag3"
                                    },
                                    "img": {
                                        "type": "string",
                                        "example": "public/img.jpg"
                                    },
                                    "status": {
                                        "type": "string",
                                        "example": "published"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Post created successfully"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "422": {
                        "description": "Wrong input or post already exists"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/posts/{id}": {
            "get": {
                "tags": ["Posts"],
                "summary": "Get a Post by ID",
                "operationId": "getPost",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the post to retrieve",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "404": {
                        "description": "Post not found"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "put": {
                "tags": ["Posts"],
                "summary": "Update Post",
                "operationId": "updatePost",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the post to update",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Update a post by ID",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "title",
                                    "content",
                                    "author",
                                    "tags",
                                    "img",
                                    "status"
                                ],
                                "properties": {
                                    "title": {
                                        "type": "string",
                                        "example": "Updated Title of the post"
                                    },
                                    "content": {
                                        "type": "string",
                                        "example": "Updated Content of the post"
                                    },
                                    "author": {
                                        "type": "string",
                                        "example": "Updated Author's name"
                                    },
                                    "tags": {
                                        "type": "string",
                                        "example": "tag1|tag2|tag3"
                                    },
                                    "img": {
                                        "type": "string",
                                        "example": "public/updated_img.jpg"
                                    },
                                    "status": {
                                        "type": "string",
                                        "example": "published"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Post updated successfully"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "422": {
                        "description": "Wrong input or post already exists"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "delete": {
                "tags": ["Posts"],
                "summary": "Delete a Post by ID",
                "operationId": "deletePost",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the post to delete",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Post deleted successfully"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "404": {
                        "description": "Post not found"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/carts": {
            "get": {
                "tags": ["Carts"],
                "summary": "Get all Carts",
                "operationId": "getCarts",
                "responses": {
                    "200": {
                        "description": "Successfully response"
                    },
                    "422": {
                        "description": "Wrong credentials response"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "post": {
                "tags": ["Carts"],
                "summary": "Create a new Cart",
                "operationId": "createCart",
                "requestBody": {
                    "description": "Create a new Cart",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": ["product_id", "quantity"],
                                "properties": {
                                    "product_id": {
                                        "type": "integer",
                                        "example": 1
                                    },
                                    "quantity": {
                                        "type": "integer",
                                        "example": 1
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Post created successfully"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "422": {
                        "description": "Wrong input or post already exists"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/carts/{id}": {
            "get": {
                "tags": ["Carts"],
                "summary": "Get a Cart by ID",
                "operationId": "getCart",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the Cart to retrieve",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "404": {
                        "description": "Post not found"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "put": {
                "tags": ["Carts"],
                "summary": "Update Cart",
                "operationId": "updateCart",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the Cart to update",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Update a Cart by ID",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": ["product_id", "quantity"],
                                "properties": {
                                    "product_id": {
                                        "type": "integer",
                                        "example": 1
                                    },
                                    "quantity": {
                                        "type": "integer",
                                        "example": 1
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Post updated successfully"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "422": {
                        "description": "Wrong input or post already exists"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "delete": {
                "tags": ["Carts"],
                "summary": "Delete a Cart by ID",
                "operationId": "deleteCart",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the Cart to delete",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Cart deleted successfully"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "404": {
                        "description": "Cart not found"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/orders": {
            "get": {
                "tags": ["Orders"],
                "summary": "Get all Orders",
                "operationId": "getOrders",
                "responses": {
                    "200": {
                        "description": "Successfully response"
                    },
                    "422": {
                        "description": "Wrong credentials response"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "post": {
                "tags": ["Orders"],
                "summary": "Create a new Order from Cart",
                "operationId": "createOrder",
                "requestBody": {
                    "description": "Create a new Order from Cart",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "order_type",
                                    "cart_item_ids",
                                    "name",
                                    "phone",
                                    "ward_id",
                                    "street",
                                    "note"
                                ],
                                "properties": {
                                    "order_type": {
                                        "type": "integer",
                                        "example": "cart"
                                    },
                                    "cart_item_ids": {
                                        "type": "array",
                                        "example": [1, 2, 3]
                                    },
                                    "name": {
                                        "type": "string",
                                        "example": "John Doe"
                                    },
                                    "phone": {
                                        "type": "string",
                                        "example": "0123456789"
                                    },
                                    "ward_id": {
                                        "type": "integer",
                                        "example": 124
                                    },
                                    "street": {
                                        "type": "string",
                                        "exapmle": "45/19 Nguyen Viet Xuan"
                                    },
                                    "note": {
                                        "type": "string",
                                        "exapmle": "Giao vao buoi sang"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Post created successfully"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "422": {
                        "description": "Wrong input or post already exists"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/orders/{id}": {
            "get": {
                "tags": ["Orders"],
                "summary": "Get a Order by ID",
                "operationId": "getOrder",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the Order to retrieve",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "404": {
                        "description": "Post not found"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "put": {
                "tags": ["Orders"],
                "summary": "Update Order",
                "operationId": "updateOrder",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the Order to update",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Update a Cart by ID",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": ["status"],
                                "properties": {
                                    "status": {
                                        "type": "string",
                                        "example": "processing"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Post updated successfully"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "422": {
                        "description": "Wrong input or post already exists"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "delete": {
                "tags": ["Orders"],
                "summary": "Delete a Order by ID",
                "operationId": "deleteOrder",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the Order to delete",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Order deleted successfully"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "404": {
                        "description": "Order not found"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/sellers": {
            "get": {
                "tags": ["Sellers"],
                "summary": "Get all Sellers",
                "operationId": "getSellers",
                "responses": {
                    "200": {
                        "description": "Successfully response"
                    },
                    "422": {
                        "description": "Wrong credentials response"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "post": {
                "tags": ["Sellers"],
                "summary": "Create a new Seller",
                "operationId": "createSeller",
                "requestBody": {
                    "description": "Create a new Seller",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "name",
                                    "email",
                                    "phone_number",
                                    "address_id",
                                    "user_id"
                                ],
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "example": "John Doe"
                                    },
                                    "email": {
                                        "type": "string",
                                        "format": "email",
                                        "example": "gmail@gmail.com"
                                    },
                                    "phone_number": {
                                        "type": "string",
                                        "example": "0123456789"
                                    },
                                    "address_id": {
                                        "type": "integer",
                                        "example": 1
                                    },
                                    "user_id": {
                                        "type": "integer",
                                        "example": 1
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Post created successfully"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "422": {
                        "description": "Wrong input or post already exists"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/sellers/{id}": {
            "get": {
                "tags": ["Sellers"],
                "summary": "Get a Seller by ID",
                "operationId": "getSeller",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the Seller to retrieve",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "404": {
                        "description": "Seller not found"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "put": {
                "tags": ["Sellers"],
                "summary": "Update Seller",
                "operationId": "updateSeller",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the Seller to update",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Update a Seller by ID",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "name",
                                    "email",
                                    "phone_number",
                                    "address_id",
                                    "user_id"
                                ],
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "example": "John Doe"
                                    },
                                    "email": {
                                        "type": "string",
                                        "format": "email",
                                        "example": "gmail@gmail.com"
                                    },
                                    "phone_number": {
                                        "type": "string",
                                        "example": "0123456789"
                                    },
                                    "address_id": {
                                        "type": "integer",
                                        "example": 1
                                    },
                                    "user_id": {
                                        "type": "integer",
                                        "example": 1
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Seller updated successfully"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "422": {
                        "description": "Wrong input or Seller already exists"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "delete": {
                "tags": ["Sellers"],
                "summary": "Delete a Seller by ID",
                "operationId": "deleteSeller",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the Seller to delete",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Seller deleted successfully"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "404": {
                        "description": "Seller not found"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/reviews": {
            "get": {
                "tags": ["Reviews"],
                "summary": "Get all Reviews",
                "operationId": "getReviews",
                "responses": {
                    "200": {
                        "description": "Successfully response"
                    },
                    "422": {
                        "description": "Wrong credentials response"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "post": {
                "tags": ["Reviews"],
                "summary": "Create a new Review",
                "operationId": "createReview",
                "requestBody": {
                    "description": "Create a new Review",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": ["product_id", "rating", "comment"],
                                "properties": {
                                    "product_id": {
                                        "type": "integer",
                                        "example": 1
                                    },
                                    "rating": {
                                        "type": "integer",
                                        "example": 5
                                    },
                                    "comment": {
                                        "type": "string",
                                        "example": "Good"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Review created successfully"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "422": {
                        "description": "Wrong input or Review already exists"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/reviews/{id}": {
            "get": {
                "tags": ["Reviews"],
                "summary": "Get a Review by ID",
                "operationId": "getReview",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the Review to retrieve",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "404": {
                        "description": "Review not found"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "put": {
                "tags": ["Reviews"],
                "summary": "Update Review",
                "operationId": "updateReview",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the Review to update",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Update a Review by ID",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": ["product_id", "rating", "comment"],
                                "properties": {
                                    "product_id": {
                                        "type": "integer",
                                        "example": 1
                                    },
                                    "rating": {
                                        "type": "integer",
                                        "example": 5
                                    },
                                    "comment": {
                                        "type": "string",
                                        "example": "Good"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Review updated successfully"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "422": {
                        "description": "Wrong input or Review already exists"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "delete": {
                "tags": ["Reviews"],
                "summary": "Delete a Review by ID",
                "operationId": "deleteReview",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the Review to delete",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Review deleted successfully"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "404": {
                        "description": "Review not found"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/coupons": {
            "get": {
                "tags": ["Coupons"],
                "summary": "Get all Coupons",
                "operationId": "getCoupons",
                "responses": {
                    "200": {
                        "description": "Successfully response"
                    },
                    "422": {
                        "description": "Wrong credentials response"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "post": {
                "tags": ["Coupons"],
                "summary": "Create a new Coupon",
                "operationId": "createCoupon",
                "requestBody": {
                    "description": "Create a new Coupon",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "code",
                                    "description",
                                    "start_date",
                                    "end_date",
                                    "amount",
                                    "quantity"
                                ],
                                "properties": {
                                    "code": {
                                        "type": "string",
                                        "example": "JD3T2"
                                    },
                                    "description": {
                                        "type": "string",
                                        "example": "Deal 50%"
                                    },
                                    "start_date": {
                                        "type": "date",
                                        "format": "Y/m/d",
                                        "example": "YYYY/mm/dd"
                                    },
                                    "end_date": {
                                        "type": "date",
                                        "format": "Y/m/d",
                                        "example": "YYYY/mm/dd"
                                    },
                                    "amount": {
                                        "type": "string",
                                        "example": "50%"
                                    },
                                    "quantity": {
                                        "type": "integer",
                                        "example": 100
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Coupon created successfully"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "422": {
                        "description": "Wrong input or Coupon already exists"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/coupons/{id}": {
            "get": {
                "tags": ["Coupons"],
                "summary": "Get a Coupon by ID",
                "operationId": "getCoupon",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the Coupon to retrieve",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "404": {
                        "description": "Coupon not found"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "put": {
                "tags": ["Coupons"],
                "summary": "Update Coupon",
                "operationId": "updateCoupon",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the Coupon to update",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Update a Coupon by ID",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "code",
                                    "description",
                                    "start_date",
                                    "end_date",
                                    "amount",
                                    "quantity"
                                ],
                                "properties": {
                                    "code": {
                                        "type": "string",
                                        "example": "JD3T2"
                                    },
                                    "description": {
                                        "type": "string",
                                        "example": "Deal 50%"
                                    },
                                    "start_date": {
                                        "type": "date",
                                        "format": "Y/m/d",
                                        "example": "YYYY/mm/dd"
                                    },
                                    "end_date": {
                                        "type": "date",
                                        "format": "Y/m/d",
                                        "example": "YYYY/mm/dd"
                                    },
                                    "amount": {
                                        "type": "string",
                                        "example": "50%"
                                    },
                                    "quantity": {
                                        "type": "integer",
                                        "example": 100
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Coupon updated successfully"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "422": {
                        "description": "Wrong input or Coupon already exists"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "delete": {
                "tags": ["Coupons"],
                "summary": "Delete a Coupon by ID",
                "operationId": "deleteCoupon",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the Coupon to delete",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Coupon deleted successfully"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "404": {
                        "description": "Coupon not found"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/coupon_usages": {
            "get": {
                "tags": ["CouponUsages"],
                "summary": "Get all CouponUsages",
                "operationId": "getCouponUsages",
                "responses": {
                    "200": {
                        "description": "Successfully response"
                    },
                    "422": {
                        "description": "Wrong credentials response"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "post": {
                "tags": ["CouponUsages"],
                "summary": "Create a new CouponUsage",
                "operationId": "createCouponUsage",
                "requestBody": {
                    "description": "Create a new CouponUsage",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": ["code", "order_id"],
                                "properties": {
                                    "code": {
                                        "type": "string",
                                        "example": "JD3T2"
                                    },
                                    "order_id": {
                                        "type": "integer",
                                        "example": 1
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "CouponUsage created successfully"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "422": {
                        "description": "Wrong input or CouponUsage already exists"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/coupon_usages/{id}": {
            "get": {
                "tags": ["CouponUsages"],
                "summary": "Get a CouponUsage by ID",
                "operationId": "getCouponUsage",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the CouponUsage to retrieve",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "404": {
                        "description": "CouponUsage not found"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "put": {
                "tags": ["CouponUsages"],
                "summary": "Update CouponUsage",
                "operationId": "updateCouponUsage",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the CouponUsage to update",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Update a Coupon by ID",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": ["code", "order_id"],
                                "properties": {
                                    "code": {
                                        "type": "string",
                                        "example": "JD3T2"
                                    },
                                    "order_id": {
                                        "type": "integer",
                                        "example": 1
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "CouponUsage updated successfully"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "422": {
                        "description": "Wrong input or CouponUsage already exists"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "delete": {
                "tags": ["CouponUsages"],
                "summary": "Delete a CouponUsage by ID",
                "operationId": "deleteCouponUsage",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the CouponUsage to delete",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "CouponUsage deleted successfully"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "404": {
                        "description": "CouponUsage not found"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/addresses/getProvinces": {
            "get": {
                "tags": ["Addresses"],
                "summary": "Get all Provinces",
                "operationId": "getProvinces",
                "responses": {
                    "200": {
                        "description": "Successfully response"
                    },
                    "422": {
                        "description": "Wrong credentials response"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/addresses/getDistricts/{id}": {
            "get": {
                "tags": ["Addresses"],
                "summary": "Get all districts by province_id",
                "operationId": "getDistrictsByProvinceID",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Province ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully response"
                    },
                    "422": {
                        "description": "Wrong credentials response"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/addresses/getWards/{id}": {
            "get": {
                "tags": ["Addresses"],
                "summary": "Get all wards by district_id",
                "operationId": "getWardsByDistrictID",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "District ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully response"
                    },
                    "422": {
                        "description": "Wrong credentials response"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/settings": {
            "get": {
                "tags": ["Settings"],
                "summary": "Get all Settings",
                "operationId": "getSettings",
                "responses": {
                    "200": {
                        "description": "Successfully response"
                    },
                    "422": {
                        "description": "Wrong credentials response"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "post": {
                "tags": ["Settings"],
                "summary": "Create a new Setting",
                "operationId": "createSetting",
                "requestBody": {
                    "description": "Create a new Setting",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": ["name", "value"],
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "example": "logo"
                                    },
                                    "value": {
                                        "type": "string",
                                        "example": "public/img.jpg"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Setting created successfully"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "422": {
                        "description": "Wrong input or Setting already exists"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/settings/{id}": {
            "get": {
                "tags": ["Settings"],
                "summary": "Get a Setting by ID",
                "operationId": "getSetting",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the Setting to retrieve",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "404": {
                        "description": "Coupon not found"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "put": {
                "tags": ["Settings"],
                "summary": "Update Setting",
                "operationId": "updateSetting",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the Setting to update",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Update a Setting by ID",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": ["name", "value"],
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "example": "logo"
                                    },
                                    "value": {
                                        "type": "string",
                                        "example": "public/img.jpg"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Setting updated successfully"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "422": {
                        "description": "Wrong input or Setting already exists"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "delete": {
                "tags": ["Settings"],
                "summary": "Delete a Setting by ID",
                "operationId": "deleteSetting",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the Setting to delete",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Setting deleted successfully"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "404": {
                        "description": "Setting not found"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        }
    },

    "components": {
        "securitySchemes": {
            "sanctum": {
                "type": "apiKey",
                "description": "Enter token in format (Bearer <token>)",
                "name": "Authorization",
                "in": "header",
                "default": "Bearer <token>"
            }
        }
    }
}
